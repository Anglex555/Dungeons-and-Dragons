import sys
from PyQt5.QtCore import Qt, QSize, QTimer
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QWidget, \
    QGraphicsDropShadowEffect, QPushButton, QGridLayout, QSpacerItem, \
    QSizePolicy, QApplication
from PyQt5.QtGui import QTextCursor, QTextCharFormat, QFont
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QAction, QMenu, QMenuBar, QGraphicsOpacityEffect
from PyQt5.QtCore import QPropertyAnimation, QEasingCurve, Qt
from datetime import datetime
from PyQt5.QtGui import QIcon
import sys
import random
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel
from PyQt5.QtGui import QPixmap, QTransform
from PyQt5.QtCore import QTimer, Qt, pyqtProperty

Stylesheet = """
#Custom_Widget {
    background-color: #896648;
    border-radius: 10px;
}
#Custom_Dialog {
    background-color: #ac8b68;
    border-radius: 10px;
}

#closeButton {
    min-width: 36px;
    min-height: 36px;
    font-family: "Webdings";
    qproperty-text: "r";
    border-radius: 10px;
}
#modeButton {
    min-width: 36px;
    min-height: 36px;
    font-family: "Webdings";
    border-radius: 10px;
}
#modeButton:hover {
    color: white;
    background: #201c4d;
}
#closeButton:hover {
    color: white;
    background: red;
}
#VerticalRectangle {
    background-color: #800080; /* Цвет вертикального прямоугольника */
}
"""

class Dialog(QDialog):

    def __init__(self, *args, **kwargs):
        super(Dialog, self).__init__(*args, **kwargs)
        self.setObjectName('Custom_Dialog')
        self.setStyleSheet('QDialog#Custom_Dialog { border-radius: 10px; }')
        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)
        self.setStyleSheet(Stylesheet)
        self.initUi()
        # Добавляем анимацию открытия окна
        self.animate_open()
        effect = QGraphicsDropShadowEffect(self)
        effect.setBlurRadius(12)
        effect.setOffset(0, 0)
        effect.setColor(Qt.gray)
        self.setGraphicsEffect(effect)

    def initUi(self):
        layout = QVBoxLayout(self)

        # 重点: Этот виджет используется как фон с закругленными углами
        self.widget = QWidget(self)
        self.widget.setObjectName('Custom_Widget')
        self.widget.setStyleSheet("background-color: white;")

        layout.addWidget(self.widget)

        # Создаем кнопку закрытия и добавляем ее в правый верхний угол окна
        self.close_button = QPushButton('r', self)
        self.close_button.clicked.connect(self.accept)
        self.close_button.setObjectName('closeButton')
        self.close_button.setMaximumSize(36, 36)
        layout.addWidget(self.close_button, alignment=Qt.AlignTop | Qt.AlignRight)

        # Переместите кнопку закрытия на 40 пикселей ниже
        layout.addSpacing(-40)

        # Создаем кнопку для переключения режимов
        self.mode_button = QPushButton(self)
        self.mode_button.setObjectName('modeButton')
        self.mode_button.setIcon(QIcon("mod.png"))  # Укажите путь к изображению
        self.mode_button.setIconSize(QSize(44, 36))
        self.mode_button.clicked.connect(self.toggle_mode)
        layout.addWidget(self.mode_button, alignment=Qt.AlignLeft)
        # Создаем горизонтальный макет для размещения chat_window и dice_window
        horizontal_layout = QHBoxLayout()

        # Добавляем chat_window в левый столбец горизонтального макета
        self.chat_window = ChatWindow()
        horizontal_layout.addWidget(self.chat_window)

        # Добавляем dice_window в правый столбец горизонтального макета
        self.dice_window = DiceApp()
        horizontal_layout.addWidget(self.dice_window)

        # Добавляем горизонтальный макет в вертикальный макет
        layout.addLayout(horizontal_layout)

        # Добавляем код чата сюда
        # self.chat_window = ChatWindow()
        # self.dice_window = DiceApp()
        # layout.addWidget(self.chat_window)
        # layout.addWidget(self.dice_window)

    def toggle_mode(self):
        # Добавьте ваш код для переключения режима (дневной/ночной) здесь
        if self.chat_window.isNightMode():
            self.set_day_mode()
            self.chat_window.set_day_mode()
        else:
            self.chat_window.set_night_mode()
            self.set_night_mode()

    def set_day_mode(self):
        self.setStyleSheet(Stylesheet + """
            #Custom_Dialog {
                background-color: #ac8b68;
                border-radius: 10px;
            }
        """)
        self.chat_window.set_day_mode()
        self.is_night_mode = False

    def set_night_mode(self):
        self.setStyleSheet(Stylesheet + """
            #Custom_Dialog {
                background-color: #1b1b1f; /* Ночной режим */
                border-radius: 10px;
            }
        """)
        self.chat_window.set_night_mode()
        self.is_night_mode = True

    def animate_open(self):
        # Создаем анимацию для окна чата (плавное появление)
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(1000)  # Длительность анимации в миллисекундах
        self.animation.setStartValue(0.0)  # Начальная прозрачность (окно невидимо)
        self.animation.setEndValue(1.0)  # Конечная прозрачность (полностью видимо)
        self.animation.setEasingCurve(QEasingCurve.OutQuad)  # Устанавливаем кривую изменения прозрачности
        self.animation.start()

    def sizeHint(self):
        return QSize(1000, 600)

class ChatWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("DnD")
        self.setGeometry(100, 100, 800, 600)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        self.chat_bot = DungeonMaster()

        layout = QVBoxLayout()

        self.message_display = QTextEdit()
        self.message_display.setReadOnly(True)
        layout.addWidget(self.message_display)

        input_layout = QHBoxLayout()

        self.text_input = QTextEdit()
        self.text_input.setFixedHeight(35) 
        self.text_input.setPlaceholderText("Введите ваше сообщение...")
        self.text_input.keyPressEvent = self.custom_keyPressEvent
        self.text_input.keyPressEvent = self.process_enter_key
        input_layout.addWidget(self.text_input)

        self.send_button = QPushButton(self)
        self.send_button.clicked.connect(self.send_message)
        self.send_button.setObjectName("SendButton")
        self.send_button.setIcon(QIcon("send.png"))
        self.send_button.setIconSize(QSize(28, 24))
        self.send_button.setFixedSize(40, 36) 
        self.set_button_style(self.send_button)  
        input_layout.addWidget(self.send_button)


        layout.addLayout(input_layout)

        central_widget.setLayout(layout)

        self.set_day_mode()

        self.animate_open()
        
        self.opacity_effect = QGraphicsOpacityEffect(self.send_button)
        self.send_button.setGraphicsEffect(self.opacity_effect)
        self.opacity_animation = QPropertyAnimation(self.opacity_effect, b"opacity")
        self.opacity_animation.setEasingCurve(QEasingCurve.OutQuad)
        self.opacity_animation.setDuration(300)
        self.opacity_animation.setStartValue(0)
        self.opacity_animation.setEndValue(1)
        self.opacity_animation.finished.connect(self.reset_button_opacity)

        self.set_button_style(self.send_button)

    def animate_open(self):
        self.animation = QPropertyAnimation(self, b"windowOpacity")
        self.animation.setDuration(1000) 
        self.animation.setStartValue(0.0)
        self.animation.setEndValue(1.0) 
        self.animation.setEasingCurve(QEasingCurve.OutQuad)
        self.animation.start()

    def reset_button_opacity(self):
        self.opacity_effect.setOpacity(1)

    def custom_keyPressEvent(self, event):
        if event.key() == Qt.Key_Return:
            if event.modifiers() == Qt.ControlModifier:
                # Если нажаты одновременно Ctrl+Enter, то вставляем перенос строки
                cursor = self.text_input.textCursor()
                cursor.insertBlock()
                self.text_input.setTextCursor(cursor)
            else:
                # В противном случае отправляем сообщение
                self.send_message()
        else:
            super(QTextEdit, self.text_input).keyPressEvent(event)

    def process_enter_key(self, event):
        if event.key() == Qt.Key_Enter or event.key() == Qt.Key_Return:
            self.send_message()
        else:
            QTextEdit.keyPressEvent(self.text_input, event)
    
    def set_day_mode(self):
        self.setStyleSheet("""
            QMainWindow {
                background-color: #c3ab92; /* Немного темнее старой бумаги */
                border-radius: 10px;
            }
            QTextEdit {
                background-color: #d2c0ad; /* Немного темнее цвет пергамента */
                border: 1px solid #B9877B;
                padding: 5px;
                color: black;
            }
            QPushButton#SendButton {
                background-color: #800080; /* Фиолетовый цвет */
                color: white;
                border: none;
                padding: 5px 10px;
                margin-left: 5px;
                border-radius: 10px; /* Закругленные углы */
            }
        """)
        self.is_night_mode = False

    def set_night_mode(self):
        self.setStyleSheet("""
            QMainWindow {
                background-color: #222;
                border-radius: 10px;
            }
            QTextEdit {
                background-color: #333;
                border: 1px solid #444;
                padding: 5px;
                color: white;
            }
            QPushButton#SendButton {
                background-color: #800080; /* Фиолетовый цвет */
                color: white;
                border: none;
                padding: 5px 10px;
                margin-left: 5px;
                border-radius: 10px; /* Закругленные углы */
            }
        """)
        self.is_night_mode = True

    def send_message(self):
        text = self.text_input.toPlainText()
        if text:
            timestamp = datetime.now().strftime("%H:%M:%S")  # Получаем текущее время
            message = f"[{timestamp}] Вы: {text}"  # Формируем сообщение с именем пользователя и временем
            text_format = QTextCharFormat()

            # Устанавливаем жирный шрифт для имени и времени
            text_format.setFontWeight(QFont.Bold)

            # Устанавливаем цвет текста в ночном режиме (белый)
            if self.isNightMode():
                text_format.setForeground(Qt.white)

            cursor = self.message_display.textCursor()
            cursor.movePosition(QTextCursor.End)
            cursor.insertText(message, text_format)
            cursor.insertBlock()
            
            self.text_input.clear()
            self.text_input.setFocus()
            
            bot_response = self.chat_bot.get_response(text)

            timestamp = datetime.now().strftime("%H:%M:%S")
            bot_message = f"[{timestamp}] Бот: {bot_response}"
            cursor.insertText(bot_message, text_format)
            cursor.insertBlock()

            self.text_input.clear()
            self.text_input.setFocus()
            
            # Запускаем анимацию при нажатии на кнопку "Отправить"
            self.opacity_animation.start()

    def isNightMode(self):
        # Функция, чтобы определить, включен ли ночной режим
        return "background-color: #333" in self.styleSheet()

    def set_button_style(self, button):
        button.setStyleSheet("""
            background-color: #800080; /* Фиолетовый цвет */
            color: white;
            border: none;
            padding: 5px 10px;
            margin-left: 5px;
            border-radius: 10px; /* Закругленные углы */
        """)

    def sizeHint(self):
            return QSize(600, 400)

class DungeonMaster:
    def __init__(self):
        self.responses = {
            "привет": "Привет! Как я могу помочь вам сегодня?",
            "как дела": "У меня всё хорошо, спасибо! А у вас?",
            "спасибо": "Пожалуйста! Если у вас есть ещё вопросы, не стесняйтесь спрашивать."
        }

    def get_response(self, message):
        message = message.lower()
        response = self.responses.get(message, "Извините, я не понял ваш запрос.")
        return response

class DiceApp(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setGeometry(100, 100, 300, 600)
        self.setWindowTitle('20-гранный кубик')

        layout = QVBoxLayout()

        self.dice_label = RotatableLabel(self)
        self.dice_label.setAlignment(Qt.AlignCenter)
        self.dice_label.setFixedSize(250, 250)
        layout.addWidget(self.dice_label)

        roll_button = QPushButton('Бросить кубик', self)
        roll_button.clicked.connect(self.start_animation)
        layout.addWidget(roll_button)

        self.setLayout(layout)

        self.dice_images = []
        for i in range(1, 21):
            image_path = f'c:/Ультилиты/2/Mai/DnD/Dice/d{i}.png'
            image = QPixmap(image_path)
            scaled_image = image.scaled(self.dice_label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.dice_images.append(scaled_image)

        self.dice_label.setPixmap(self.dice_images[19])
        self.animation_timer = QTimer(self)
        self.animation_timer.timeout.connect(self.update_animation)
        self.animation_duration = 500  # Продолжительность анимации в миллисекундах
        self.animation_steps = 35  # Количество шагов анимации
        self.current_step = 0
        self.current_image = None
        self.current_interval = 0  # Начальный интервал таймера

    def start_animation(self):
        self.current_step = 0
        self.current_interval = 0  # Начальный интервал таймера
        self.animation_timer.start(self.current_interval)

    def update_animation(self):
        if self.current_step < self.animation_steps:
            # Выбираем случайное изображение и отображаем его
            if self.current_step % 10 > self.current_step // 100 or self.current_step % 10 == 0:
                random_image = random.choice(self.dice_images)
                self.dice_label.setPixmap(random_image)
                self.dice_label.angle += 30  # Увеличиваем угол на 30 градусов на каждом шаге

            # Увеличиваем интервал таймера для замедления анимации
            self.current_interval += 3 + self.current_step // 3
            if self.current_step // 10 == 3:
                self.current_interval += 5
            self.animation_timer.setInterval(self.current_interval)

            self.current_step += 1
            if self.current_step % 10 == 0:
                print(self.current_step)
                print(self.animation_steps)
                print(self.current_step < self.animation_steps)
        else:
            # Анимация завершена, выбираем окончательное изображение
            final_image = random.choice(self.dice_images)
            self.dice_label.setPixmap(final_image)
            self.dice_label.angle += 30
            self.animation_timer.stop()

class RotatableLabel(QLabel):
    def __init__(self, parent=None):
        super(RotatableLabel, self).__init__(parent)
        self._angle = 0

    @pyqtProperty(float)
    def angle(self):
        return self._angle

    @angle.setter
    def angle(self, value):
        self._angle = value
        transform = QTransform()
        transform.rotate(self._angle)
        self.setPixmap(self.pixmap().transformed(transform))

if __name__ == '__main__':
    import sys

    app = QApplication(sys.argv)
    w = Dialog()
    w.exec_()
    QTimer.singleShot(200, app.quit)
    sys.exit(app.exec_())